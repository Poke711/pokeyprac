document.addEventListener('DOMContentLoaded', () => {
    if (!isLocalStorageAvailable()) {
        alert('Error: localStorage is not available. Please use a local development server for the application to function correctly.');
        return;
    }

    const path = window.location.pathname;
    const page = path.substring(path.lastIndexOf('/') + 1);

    if (page === 'index.html' || page === '') {
        setupInputPage();
    } else if (page === 'data.html') {
        setupDataPage();
    }
});

function isLocalStorageAvailable() {
    try {
        const storage = window.localStorage;
        const x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return true;
    } catch (e) {
        return false;
    }
}

const stages = {
    "Bob-omb Battlefield": ["Big Bob-omb on the Summit", "Footrace with Koopa the Quick", "Shoot to the Island in the Sky", "Find the 8 Red Coins", "Mario Wings to the Sky", "Behind Chain Chomp's Gate"],
    "Whomp's Fortress": ["Chip Off Whomp's Block", "To the Top of the Fortress", "Shoot into the Wild Blue", "Red Coins on the Floating Isle", "Fall onto the Caged Island", "Blast Away the Wall"],
    "Jolly Roger Bay": ["Plunder in the Sunken Ship", "Can the Eel Come Out to Play?", "Treasure of the Ocean Cave", "Red Coins on the Ship Afloat", "Blast to the Stone Pillar", "Through the Jet Stream"],
    "Cool, Cool Mountain": ["Slip Slidin' Away", "Li'l Penguin Lost", "Big Penguin Race", "Frosty Slide for 8 Red Coins", "Snowman's Lost His Head", "Wall Kicks Will Work"],
    "Big Boo's Haunt": ["Go on a Ghost Hunt", "Ride Big Boo's Merry-Go-Round", "Secret of the Haunted Books", "Seek the 8 Red Coins", "Big Boo's Balcony", "Eye to Eye in the Secret Room"],
    "Hazy Maze Cave": ["Swimming Beast in the Cavern", "Elevate for 8 Red Coins", "Metal-Head Mario Can Move!", "Navigating the Toxic Maze", "A-Maze-Ing Emergency Exit", "Watch for Rolling Rocks"],
    "Lethal Lava Land": ["Boil the Big Bully", "Bully the Bullies", "8-Coin Puzzle with 15 Pieces", "Red-Hot Log Rolling", "Hot-Foot-It into the Volcano", "Elevator Tour in the Volcano"],
    "Shifting Sand Land": ["In the Talons of the Big Bird", "Shining Atop the Pyramid", "Inside the Ancient Pyramid", "Stand Tall on the Four Pillars", "Free Flying for 8 Red Coins", "Pyramid Puzzle"],
    "Dire, Dire Docks": ["Board Bowser's Sub", "Chests in the Current", "Pole-Jumping for Red Coins", "Through the Jet Stream", "The Manta Ray's Reward", "Collect the Caps..."],
    "Snowman's Land": ["Snowman's Big Head", "Chill with the Bully", "In the Deep Freeze", "Whirl from the Freezing Pond", "Shell Shreddin' for Red Coins", "Into the Igloo"],
    "Wet-Dry World": ["Shocking Arrow Lifts!", "Top o' the Town", "Secrets in the Shallows & Sky", "Express Elevators--Hurry Up!", "Go to Town for Red Coins", "Quick Race Through Downtown!"],
    "Tall, Tall Mountain": ["Scale the Mountain", "Mystery of the Monkey Cage", "Scary 'Shrooms, Red Coins", "Mysterious Mountainside", "Breathtaking View from Bridge", "Blast to the Lonely Mushroom"],
    "Tiny-Huge Island": ["Pluck the Piranha Flower", "The Tip Top of the Huge Island", "Rematch with Koopa the Quick", "Five Itty Bitty Secrets", "Wiggler's Red Coins", "Make Wiggler Squirm"],
    "Tick Tock Clock": ["Roll into the Cage", "The Pit and the Pendulums", "Get a Hand", "Stomp on the Thwomp", "Timed Jumps on Moving Bars", "Stop Time for Red Coins"],
    "Rainbow Ride": ["Cruiser Crossing the Rainbow", "The Big House in the Sky", "Coins Amassed in a Maze", "Swingin' in the Breeze", "Tricky Triangles!", "Somewhere Over the Rainbow"]
};

function showSuccessPopup(message) {
    const popup = document.createElement('div');
    popup.className = 'popup';
    popup.textContent = message;
    document.body.appendChild(popup);
    setTimeout(() => popup.classList.add('show'), 10);
    setTimeout(() => {
        popup.classList.remove('show');
        popup.addEventListener('transitionend', () => popup.remove());
    }, 3000);
}

// NEW function to display recent submissions
function displayRecentSubmissions() {
    const container = document.getElementById('recent-submissions-container');
    if (!container) return; // Don't run if the container doesn't exist

    const allProgress = JSON.parse(localStorage.getItem('progress')) || [];
    const recentThree = allProgress.slice(-3).reverse(); // Get last 3 and reverse so newest is first

    container.innerHTML = ''; // Clear existing items

    if (recentThree.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #888;">No submissions yet.</p>';
        return;
    }

    recentThree.forEach(progress => {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'recent-item';
        itemDiv.innerHTML = `
            <div class="recent-info">
                <p class="star-name">${progress.star}</p>
                <p>${progress.stage}</p>
            </div>
            <button class="copy-btn" data-id="${progress.id}">Copy</button>
        `;
        container.appendChild(itemDiv);
    });
}


function setupInputPage() {
    const stageSelect = document.getElementById('stage-select');
    const starSelect = document.getElementById('star-select');
    const form = document.getElementById('progress-form');
    const urlParams = new URLSearchParams(window.location.search);
    const editId = urlParams.get('edit');

    for (const stage in stages) {
        const option = document.createElement('option');
        option.value = stage;
        option.textContent = stage;
        stageSelect.appendChild(option);
    }

    const updateStars = () => {
        const selectedStage = stageSelect.value;
        starSelect.innerHTML = '';
        stages[selectedStage].forEach(star => {
            const option = document.createElement('option');
            option.value = star;
            option.textContent = star;
            starSelect.appendChild(option);
        });
    };

    stageSelect.addEventListener('change', updateStars);
    updateStars();

    form.addEventListener('submit', (e) => {
        e.preventDefault();
        const progressData = {
            id: editId ? parseInt(editId) : Date.now(),
            stage: form.stage.value,
            star: form.star.value,
            streak: form.streak.value,
            xcam: form.xcam.value,
        };

        let allProgress = JSON.parse(localStorage.getItem('progress')) || [];

        if (editId) {
            allProgress = allProgress.map(p => p.id === parseInt(editId) ? progressData : p);
            localStorage.setItem('progress', JSON.stringify(allProgress));
            window.location.href = 'data.html';
        } else {
            allProgress.push(progressData);
            localStorage.setItem('progress', JSON.stringify(allProgress));
            showSuccessPopup('Progress saved successfully!');
            form.streak.value = '';
            form.xcam.value = '';
            displayRecentSubmissions(); // Refresh the list after adding
        }
    });

    if (editId) {
        let allProgress = JSON.parse(localStorage.getItem('progress')) || [];
        const progressToEdit = allProgress.find(p => p.id === parseInt(editId));
        if (progressToEdit) {
            form.stage.value = progressToEdit.stage;
            updateStars();
            form.star.value = progressToEdit.star;
            form.streak.value = progressToEdit.streak;
            form.xcam.value = progressToEdit.xcam;
            form.querySelector('button').textContent = 'Update Progress';
        }
    }

    // Event listener for the "Copy" buttons
    const recentContainer = document.getElementById('recent-submissions-container');
    recentContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('copy-btn')) {
            const id = parseInt(e.target.dataset.id);
            const allProgress = JSON.parse(localStorage.getItem('progress')) || [];
            const progressToCopy = allProgress.find(p => p.id === id);

            if (progressToCopy) {
                // Set form values
                form.stage.value = progressToCopy.stage;
                // IMPORTANT: Trigger the change event to update the star dropdown
                stageSelect.dispatchEvent(new Event('change'));
                form.star.value = progressToCopy.star;
                form.streak.value = progressToCopy.streak;
                form.xcam.value = progressToCopy.xcam;

                // Scroll to the top of the page to see the form
                window.scrollTo(0, 0);
            }
        }
    });

    // Initial display of recent submissions
    displayRecentSubmissions();
}

function setupDataPage() {
    const tableBody = document.querySelector('#progress-table tbody');
    let allProgress = JSON.parse(localStorage.getItem('progress')) || [];

    function renderTable() {
        tableBody.innerHTML = '';
        if (allProgress.length === 0) {
            const row = document.createElement('tr');
            const cell = document.createElement('td');
            cell.colSpan = 5;
            cell.textContent = 'No progress data found. Add some on the Input page!';
            cell.style.textAlign = 'center';
            row.appendChild(cell);
            tableBody.appendChild(row);
        } else {
            // New: Sort data so most recent appears at the top of the table
            allProgress.sort((a, b) => b.id - a.id);
            allProgress.forEach(progress => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${progress.stage}</td>
                    <td>${progress.star}</td>
                    <td>${progress.streak || 'N/A'}</td>
                    <td>${progress.xcam || 'N/A'}</td>
                    <td>
                        <button class="action-btn edit-btn" data-id="${progress.id}">Edit</button>
                        <button class="action-btn delete-btn" data-id="${progress.id}">Delete</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }
    }

    renderTable();

    tableBody.addEventListener('click', (e) => {
        const id = e.target.dataset.id;
        if (!id) return;

        if (e.target.classList.contains('delete-btn')) {
            if (confirm('Are you sure you want to delete this entry?')) {
                allProgress = allProgress.filter(p => p.id != id);
                localStorage.setItem('progress', JSON.stringify(allProgress));
                renderTable();
            }
        } else if (e.target.classList.contains('edit-btn')) {
            window.location.href = `index.html?edit=${id}`;
        }
    });
}